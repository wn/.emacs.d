#+TITLE: Weineng's Emacs config
* Overview
This is my emacs config. Do open an issue if you see any bugs or rooms for improvements.
* Preference
  STFU
  #+BEGIN_SRC emacs-lisp :tangle yes 
(setq visible-bell t)
(setq ring-bell-function 'ignore)
(put 'downcase-region 'disabled nil)
(setq custom-file "~/.emacs.d/custom.el")
  #+END_SRC

  Custom key remapping
  #+BEGIN_SRC emacs-lisp :tangle yes 
;; Swap for Dvorak layout
(keyboard-translate ?\C-x ?\C-u)
(keyboard-translate ?\C-u ?\C-x)

(when (require 'redo nil 'noerror)
    (global-set-key (kbd "C-S-z") 'redo))

(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "S-k") 'kill-buffer-and-window)
(global-set-key (kbd "C-0") 'delete-window)

(setq save-interprogram-paste-before-kill t)

;; Bindings to open special files/folders
(global-set-key (kbd "\e\ec")
  (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "\e\ed")
  (lambda () (interactive) (find-file "~/Developer")))
(global-set-key (kbd "\e\es")
  (lambda () (interactive) (eshell)))
  #+END_SRC

  Remap aliases
  #+BEGIN_SRC emacs-lisp :tangle yes 
(defalias 'yes-or-no-p 'y-or-n-p)
(defalias 'list-buffers 'ibuffer)
  #+END_SRC
* Coding enhancement
  #+BEGIN_SRC emacs-lisp :tangle yes 
(show-paren-mode 1)
(delete-selection-mode 1)

; deletes all the whitespace when you hit backspace or delete
(use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))

;; Cursor
(blink-cursor-mode 0)
(setq-default cursor-type 'bar)

(global-hl-line-mode t)
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))

(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
(define-key ac-completing-map [return] nil)
(define-key ac-completing-map "\r" nil)

(use-package yasnippet
:ensure t
:init
(yas-global-mode 1))
(require 'yasnippet)

(use-package yasnippet-snippets
 :ensure t)

(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "<c-tab>") 'yas-expand)
    
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

;; expand the marked region in semantic increments (negative prefix to reduce region)
(use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))

;; C-; Edit all words with the highlighted word.
(use-package iedit
  :ensure t)

(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

;; This line actually replaces Emacs' entire narrowing
;; keymap, that's how much I like this command. Only
;; copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (define-key LaTeX-mode-map "\C-xn"
              nil)))
  #+END_SRC
* Themes
  #+BEGIN_SRC emacs-lisp :tangle yes
(use-package overcast-theme
  :ensure t)
(require 'overcast-theme)
(load-theme 'overcast t)
  #+END_SRC
* MacOS
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))
#+END_SRC
* Org mode config
  #+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package org 
      :ensure t
      :pin org)

  (setenv "BROWSER" "chromium-browser")
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
    '(org-directory "~/Dropbox/orgfiles/")
    '(org-default-notes-file (concat org-directory "notes.org"))
    '(org-export-html-postamble nil)
    '(org-hide-leading-stars t)
    '(org-startup-folded (quote overview))
    '(org-startup-indented t)
    '(org-confirm-babel-evaluate nil)
    '(org-src-fontify-natively t))
#+END_SRC
* Windows
  #+BEGIN_SRC emacs-lisp :tangle yes 
  (global-set-key [C-tab] 'next-buffer)
  (global-set-key [C-S-tab] 'previous-buffer)

  (use-package ace-window
    :ensure t
    :defer 1
    :config
    (set-face-attribute
     'aw-leading-char-face nil
     :foreground "deep sky blue"
     :weight 'bold
     :height 3.0)
    (set-face-attribute
     'aw-mode-line-face nil
     :inherit 'mode-line-buffer-id
     :foreground "lawn green")
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
          aw-dispatch-always t
          aw-dispatch-alist
          '((?x aw-delete-window "Ace - Delete Window")
            (?c aw-swap-window "Ace - Swap Window")
            (?n aw-flip-window)
            (?v aw-split-window-vert "Ace - Split Vert Window")
            (?h aw-split-window-horz "Ace - Split Horz Window")
            (?m delete-other-windows "Ace - Maximize Window")
            (?g delete-other-windows)
            (?b balance-windows)
            (?u (lambda ()
                  (progn
                    (winner-undo)
                    (setq this-command 'winner-undo))))
            (?r winner-redo)))

    (when (package-installed-p 'hydra)
      (defhydra hydra-window-size (:color red)
        "Windows size"
        ("h" shrink-window-horizontally "shrink horizontal")
        ("j" shrink-window "shrink vertical")
        ("k" enlarge-window "enlarge vertical")
        ("l" enlarge-window-horizontally "enlarge horizontal"))
      (defhydra hydra-window-frame (:color red)
        "Frame"
        ("f" make-frame "new frame")
        ("x" delete-frame "delete frame"))
      (defhydra hydra-window-scroll (:color red)
        "Scroll other window"
        ("n" joe-scroll-other-window "scroll")
        ("p" joe-scroll-other-window-down "scroll down"))
        (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t)
      (add-to-list 'aw-dispatch-alist '(?o hydra-window-scroll/body) t)
      (add-to-list 'aw-dispatch-alist '(?\; hydra-window-frame/body) t))
    (ace-window-display-mode t))

;; Go to the window after opening it.
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  #+END_SRC

* Swiper/Ivy/Counsel
  #+BEGIN_SRC emacs-lisp :tangle yes
;; it looks like counsel is a requirement for swiper
(use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line)))
    
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC

* Misc.
  #+BEGIN_SRC emacs-lisp :tangle yes 
;; Used to try out custom packages on MELPA.
;; M-x try <package_name>
(use-package try
  :ensure t)

;; Displays the key bindings following currently entered incomplete command
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

(defun prepare-scratch-for-kill ()
  (save-excursion
    (set-buffer (get-buffer-create "*scratch*"))
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer t)))

(defun kill-scratch-buffer ()
  (let (kill-buffer-query-functions)
    (kill-buffer (current-buffer)))
  ;; no way, *scratch* shall live
  (prepare-scratch-for-kill)
  ;; Since we "killed" it, don't let caller try too
  nil)

(prepare-scratch-for-kill)
  #+END_SRC
* Python
#+BEGIN_SRC emacs-lisp :tangle yes
(setq python-shell-interpreter "python3")
(setq flycheck-python-pycompile-executable "python3"
      flycheck-python-pylint-executable "python3"
      flycheck-python-flake8-executable "python3")
(with-eval-after-load 'python
  (defun python-shell-completion-native-try ()
    "Return non-nil if can trigger native completion."
    (let ((python-shell-completion-native-enable t)
          (python-shell-completion-native-output-timeout
           python-shell-completion-native-try-output-timeout))
      (python-shell-completion-native-get-completions
       (get-buffer-process (current-buffer))
       nil "_"))))
(use-package jedi
:ensure t
:init
(add-hook 'python-mode-hook 'jedi:setup)
(add-hook 'python-mode-hook 'jedi:ac-setup))

(use-package elpy
  :ensure t
  :config
  (elpy-enable))
#+END_SRC
* Shell
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package powerline
  :ensure t
  :init
  (powerline-default-theme))

(use-package better-shell
  :ensure t
  :bind (("C-'" . better-shell-shell)
  ("C-;" . better-shell-remote-open)))
#+END_SRC
